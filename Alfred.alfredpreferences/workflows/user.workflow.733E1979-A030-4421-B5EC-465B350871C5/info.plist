<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.uniqon.lazylink</string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>56A2ACD5-8AE7-4B73-B487-83EB7E55FAF2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>622AB038-C0C2-4B5B-A1BE-0FB2443A78C7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>622AB038-C0C2-4B5B-A1BE-0FB2443A78C7</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>C182419B-F99B-423B-8468-2C63189D70B4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>936BF8E4-A80F-4492-B7D1-79F2E85A3612</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>622AB038-C0C2-4B5B-A1BE-0FB2443A78C7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>CBAA3BA6-92A5-415C-A72E-00915E29631E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>C182419B-F99B-423B-8468-2C63189D70B4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>EEE58FFA-3516-4F93-91E7-9ACFAC3EF846</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>CBAA3BA6-92A5-415C-A72E-00915E29631E</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Sungmyung Lee</string>
	<key>description</key>
	<string>Copy and paste titled link from foremost web browser</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Lazy Link</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>triggerid</key>
				<string>copyBrowserUrl</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>936BF8E4-A80F-4492-B7D1-79F2E85A3612</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>hotkey</key>
				<integer>0</integer>
				<key>hotmod</key>
				<integer>0</integer>
				<key>hotstring</key>
				<string></string>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>56A2ACD5-8AE7-4B73-B487-83EB7E55FAF2</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<true/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Pasted Lazy Link</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>C182419B-F99B-423B-8468-2C63189D70B4</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>ObjC.import('AppKit');

function run(argv) {
  var res = {};
  getWebLink(res);

  if (res.hasOwnProperty('title') &amp;&amp; res.hasOwnProperty('url')) {
    copyToClipboard(res);
    pasteFromClipboard();

    return res.title + ' - ' + res.url;
  }

  return 'Failed!';
}

function getWebLink(res) {
  var browsers = [
    'Safari',
    'Google Chrome'
  ];
  var strBrowser = '';
  for (var i = 0; i &lt; browsers.length; i++) {
    if (Application(browsers[i]).running()) {
      strBrowser = browsers[i];
      break;
    }
  }
  if (strBrowser === '') {
    return false;
  }

  if (strBrowser === 'Safari') {
    var tab = Application(strBrowser).windows[0].currentTab;
    res.url = tab.url();
    res.title = tab.name();
  }
  else if (strBrowser === 'Google Chrome') {
    res.title = applyJsCode(
      function () {
        return document.title;
      },
      strBrowser
    );
    res.url = applyJsCode(
      function () {
        return document.URL;
      },
      strBrowser
    );
  }
  else {
    return false;
  }

  return true;
}

function applyJsCode(fn, strBrowser) {
  var browser = Application(strBrowser);
  var jsCode = '(' + fn.toString() + ').apply(null);';
  var res = '';
  if (strBrowser === 'Safari') {
    res = browser.doJavaScript(
      jsCode, {
        "in": browser.windows[0].tabs[0]
      }
    );
  }
  else {
    res = browser.windows[0].activeTab.execute({
        "javascript": jsCode
      });
  }

  return res;
}

function copyToClipboard(res) {
  var pb = $.NSPasteboard.generalPasteboard;
  var str1 = $.NSString.alloc.initWithUTF8String('&lt;a href="' + res.url + '"&gt;' + res.title +'&lt;/a&gt;');
  var str2 = $.NSString.alloc.initWithUTF8String(res.url);
  var str3 = $.NSString.alloc.initWithUTF8String('{\\rtf1\\ansi\deff0{\\field{\\*\\fldinst{HYPERLINK "' + res.url + '"}}{\\fldrslt ' + res.title + '}}}');

  pb.clearContents;
  pb.setStringForType(str1, $.NSPasteboardTypeHTML);
  pb.setStringForType(str2, $.NSPasteboardTypeString);
  pb.setStringForType(str3, $.NSPasteboardTypeRTF);
}

function pasteFromClipboard() {
  var se = Application('System Events');
  se.keystroke('v', { using: 'command down' });
}</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>622AB038-C0C2-4B5B-A1BE-0FB2443A78C7</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>hotkey</key>
				<integer>0</integer>
				<key>hotmod</key>
				<integer>0</integer>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>EEE58FFA-3516-4F93-91E7-9ACFAC3EF846</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>ObjC.import('AppKit');

function run(argv) {
  var res = {};
  getWebLink(res);

  if (res.hasOwnProperty('title') &amp;&amp; res.hasOwnProperty('url')) {
    res.title = 'via: ' + res.title;
    copyToClipboard(res);
    pasteFromClipboard();

    return res.title + ' - ' + res.url;
  }

  return 'Failed!';
}

function getWebLink(res) {
  var browsers = [
    'Safari',
    'Google Chrome'
  ];
  var strBrowser = '';
  for (var i = 0; i &lt; browsers.length; i++) {
    if (Application(browsers[i]).running()) {
      strBrowser = browsers[i];
      break;
    }
  }
  if (strBrowser === '') {
    return false;
  }

  if (strBrowser === 'Safari') {
    var tab = Application(strBrowser).windows[0].currentTab;
    res.url = tab.url();
    res.title = tab.name();
  }
  else if (strBrowser === 'Google Chrome') {
    res.title = applyJsCode(
      function () {
        return document.title;
      },
      strBrowser
    );
    res.url = applyJsCode(
      function () {
        return document.URL;
      },
      strBrowser
    );
  }
  else {
    return false;
  }

  return true;
}

function applyJsCode(fn, strBrowser) {
  var browser = Application(strBrowser);
  var jsCode = '(' + fn.toString() + ').apply(null);';
  var res = '';
  if (strBrowser === 'Safari') {
    res = browser.doJavaScript(
      jsCode, {
        "in": browser.windows[0].tabs[0]
      }
    );
  }
  else {
    res = browser.windows[0].activeTab.execute({
        "javascript": jsCode
      });
  }

  return res;
}

function copyToClipboard(res) {
  var pb = $.NSPasteboard.generalPasteboard;
  var str1 = $.NSString.alloc.initWithUTF8String('&lt;a href="' + res.url + '"&gt;' + res.title +'&lt;/a&gt;');
  var str2 = $.NSString.alloc.initWithUTF8String('[' + res.title + '](' + res.url + ')');
  var str3 = $.NSString.alloc.initWithUTF8String('{\\rtf1\\ansi\deff0{\\field{\\*\\fldinst{HYPERLINK "' + res.url + '"}}{\\fldrslt ' + res.title + '}}}');

  pb.clearContents;
  pb.setStringForType(str1, $.NSPasteboardTypeHTML);
  pb.setStringForType(str2, $.NSPasteboardTypeString);
  pb.setStringForType(str3, $.NSPasteboardTypeRTF);
}

function pasteFromClipboard() {
  var se = Application('System Events');
  se.keystroke('v', { using: 'command down' });
}</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>CBAA3BA6-92A5-415C-A72E-00915E29631E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>56A2ACD5-8AE7-4B73-B487-83EB7E55FAF2</key>
		<dict>
			<key>xpos</key>
			<integer>110</integer>
			<key>ypos</key>
			<integer>180</integer>
		</dict>
		<key>622AB038-C0C2-4B5B-A1BE-0FB2443A78C7</key>
		<dict>
			<key>xpos</key>
			<integer>310</integer>
			<key>ypos</key>
			<integer>180</integer>
		</dict>
		<key>936BF8E4-A80F-4492-B7D1-79F2E85A3612</key>
		<dict>
			<key>xpos</key>
			<integer>150</integer>
			<key>ypos</key>
			<integer>40</integer>
		</dict>
		<key>C182419B-F99B-423B-8468-2C63189D70B4</key>
		<dict>
			<key>xpos</key>
			<integer>500</integer>
			<key>ypos</key>
			<integer>180</integer>
		</dict>
		<key>CBAA3BA6-92A5-415C-A72E-00915E29631E</key>
		<dict>
			<key>xpos</key>
			<integer>310</integer>
			<key>ypos</key>
			<integer>330</integer>
		</dict>
		<key>EEE58FFA-3516-4F93-91E7-9ACFAC3EF846</key>
		<dict>
			<key>xpos</key>
			<integer>110</integer>
			<key>ypos</key>
			<integer>330</integer>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>uniqon.com</string>
</dict>
</plist>
