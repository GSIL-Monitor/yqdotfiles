
snippet re "const require" b
const ${1:variable name} = require('${2:module name}')${3:;}
endsnippet

snippet req "require" i
require('${1:module name}')${2:;}
endsnippet

snippet log1 "console.log('')" b
console.log('${1:what to log}')${2:;}
endsnippet

snippet log2 "console.log()" b
console.log(${1:what to log})${2:;}
endsnippet

snippet ca "${}" i
&{${1:variable name}}
endsnippet

snippet des "describe" b
describe('${1:}', (${2:}) => {
  it('${3:description}',() => {
    ${4:expect}(${5:}).to.${6:}
    });
  });
endsnippet

snippet exp "expect()" i
expect(${1:}).to.${2:}
endsnippet

snippet es6 "jshint es6 comment" b
/* jshint esversion: 6 */
endsnippet

snippet func "es6 func" b
const ${1:name} = (${2:args}) => {
 ${3:}
}${4:;}
endsnippet

snippet fu "es6 func" i
(${2:args}) => {
 ${3:}
}${4:}
endsnippet

snippet foro "for...of" b
for (const ${1:prop} of ${2:arr}){
 ${3:}
}
endsnippet

snippet fori "for...in" b
for (const ${1:prop} in ${2:obj}){
 ${3:}
}
endsnippet

snippet it "chai it" i
it('${1:should }${2:}', () => {
  ${3:expect}(${4:}).to.${5:}
  });
endsnippet

snippet err "throw error" b
throw new Error('${1:err msg}');
endsnippet

snippet el "else" i
else{
 ${1:func}
}${2:}
endsnippet

snippet lint "eslint comment" b
/* ${1:} */
endsnippet

snippet querytag "querySelectorAll" b
const ${1:name} = document.querySelectorAll('${2:div}${3:#id or .class} ${4:}');${5:}
endsnippet

snippet switch "switch" b
switch (className) {
 case '${1:case1}':
     return ${2:func1};
 default:
     return ${3:undefined};
}
endsnippet

snippet obj "no fori and foro" b
Object.keys(${1:obj}).forEach((v,i) => {
${2:func}
  });
endsnippet

snippet rwt "rewrite" bi
// @rewrite ${1:comment}
endsnippet

snippet deb "debug" bi
${1:} // @debug ${2:}
endsnippet

snippet db "debugger" b
debugger;
endsnippet

snippet rrwt "rewrite" i
 // @rewrite ${1:comment}
endsnippet
